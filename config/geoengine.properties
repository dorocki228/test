# minimal limit for compute height in algos
geoengine.offset-z-min = 17
# upper limit for compute height in algos
geoengine.offset-z-max = 47

# minimal height for falling
# for correct movement recommend set offset-z-max + offset-z-min + 1
geoengine.fall-height-min = 65

# Maximal threads for parallel compute
# using in dynamic loading and unloading geo regions
geoengine.threading-normal-xecutor = 8
geoengine.threading-compute-executor = 4

# Delay for unload region
geoengine.unload-region-delay = 5m

# Path to geodata
geoengine.geodata.folder = ./data/geodata

# Geodata loader
# DefaultLoader - l2j geodata
# DatLoader - pts geodata
# RpLoader - rp geodata
geoengine.geodata.loader = RpLoader

# false - load all geodata to memory in start server
# true - load geodata to active region and unload for non-active
geoengine.geodata.lazy = false

# this values contains in you L2World
# if you entered not correctly values -> geodata dont loading (or loaded with errors) or any random bug ;D
geoengine.geodata.tile-x-min = 11
geoengine.geodata.tile-x-max = 26
geoengine.geodata.tile-y-min = 10
geoengine.geodata.tile-y-max = 26

geoengine.geodata.map-x-min = -294912
geoengine.geodata.map-x-max = 229375
geoengine.geodata.map-y-min = -262144
geoengine.geodata.map-y-max = 294911

# Path finding algorithm
# AStar
# BestFirst
# Grid
pathfinding.algorithm = AStar

# Maximal distance for pathfind
pathfinding.max-distance-player = 1000
# NPC, mobs and etc non playable characters
pathfinding.max-distance-etc = 500

# max time for one pathfind
pathfinding.max-search-time = 100000000

# bending path on construction step
# 1 - mod exists nodes by direction with 2t nodes
# 2 - add new nodes to path by direction with 2t nodes
# 3 - mod exists nodes by nswe current node
# 4 - add new nodes to path by nswe current node
# 5 - mod exists nodes by direction angle
# other values disable this function
pathfinding.direction-offset-type = 5

# enable trace path
pathfinding.debug = true

#Euclidean
#Gread
pathfinding.heuristics.player-type = Euclidean
pathfinding.heuristics.etc-type = Euclidean

# Path smoother chains
# Default algorithms:
#  L2JPathSmoother
# get a 3 nodes, create vector from first node to third.
# if second node include on vector - remove second node
#
#  MixedPathSmoother
# SimplePathSmoother & L2JPathSmoother
#
#  WoAnglePathSmoother
# get a 3 nodes. get directions from first to second and from second to third.
# if directions equals - remove second node
#
#  SimplePathSmoother
# get a 3 nodes. check coord nodes by main directions and diagonals
# and remove second node
#
#  FourStepPathSmoother
# like L2JPathSmoother but getting four nodes
pathfinding.prepathsmoother.algorithms = WoAnglePathSmoother,FourStepPathSmoother
pathfinding.postpathsmoother.algorithms = NonePathSmoother
# path smoother
# higher value - lower preference, but higher quality final path
pathfinding.prepathsmoother.max-passes-player = 4,4
pathfinding.prepathsmoother.max-passes-etc = 2,2
# post smoother (after construction path)
pathfinding.postpathsmoother.max-passes-player = 4
pathfinding.postpathsmoother.max-passes-etc = 2